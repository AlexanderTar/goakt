// Code generated by mockery v2.32.4. DO NOT EDIT.

package telemetry

import (
	mock "github.com/stretchr/testify/mock"
	pkgtelemetry "github.com/tochemey/goakt/pkg/telemetry"
)

// Option is an autogenerated mock type for the Option type
type Option struct {
	mock.Mock
}

type Option_Expecter struct {
	mock *mock.Mock
}

func (_m *Option) EXPECT() *Option_Expecter {
	return &Option_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: config
func (_m *Option) Apply(config *pkgtelemetry.Telemetry) {
	_m.Called(config)
}

// Option_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type Option_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - config *pkgtelemetry.Telemetry
func (_e *Option_Expecter) Apply(config interface{}) *Option_Apply_Call {
	return &Option_Apply_Call{Call: _e.mock.On("Apply", config)}
}

func (_c *Option_Apply_Call) Run(run func(config *pkgtelemetry.Telemetry)) *Option_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*pkgtelemetry.Telemetry))
	})
	return _c
}

func (_c *Option_Apply_Call) Return() *Option_Apply_Call {
	_c.Call.Return()
	return _c
}

func (_c *Option_Apply_Call) RunAndReturn(run func(*pkgtelemetry.Telemetry)) *Option_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// NewOption creates a new instance of Option. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOption(t interface {
	mock.TestingT
	Cleanup(func())
}) *Option {
	mock := &Option{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
